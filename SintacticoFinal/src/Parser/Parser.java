
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Parser;

import java_cup.runtime.*;
import java.io.FileInputStream;
import java.io.InputStream;
import java.io.FileReader;
import Ast.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\107\000\002\002\004\000\002\002\003\000\002\003" +
    "\004\000\002\003\003\000\002\004\003\000\002\004\003" +
    "\000\002\005\005\000\002\005\010\000\002\042\003\000" +
    "\002\042\003\000\002\006\010\000\002\007\003\000\002" +
    "\007\003\000\002\010\005\000\002\010\003\000\002\011" +
    "\004\000\002\011\006\000\002\012\006\000\002\013\004" +
    "\000\002\013\003\000\002\014\004\000\002\014\003\000" +
    "\002\015\003\000\002\015\003\000\002\015\003\000\002" +
    "\015\003\000\002\015\003\000\002\016\004\000\002\016" +
    "\003\000\002\017\007\000\002\017\011\000\002\020\003" +
    "\000\002\020\003\000\002\021\007\000\002\022\013\000" +
    "\002\023\004\000\002\023\005\000\002\024\005\000\002" +
    "\024\003\000\002\025\003\000\002\025\006\000\002\026" +
    "\005\000\002\026\003\000\002\036\003\000\002\036\003" +
    "\000\002\036\003\000\002\036\003\000\002\036\003\000" +
    "\002\036\003\000\002\027\005\000\002\027\003\000\002" +
    "\037\003\000\002\037\003\000\002\030\005\000\002\030" +
    "\003\000\002\040\003\000\002\040\003\000\002\031\005" +
    "\000\002\031\003\000\002\041\003\000\002\041\003\000" +
    "\002\032\005\000\002\032\003\000\002\032\003\000\002" +
    "\032\003\000\002\033\006\000\002\034\003\000\002\034" +
    "\003\000\002\035\005\000\002\035\003\000\002\043\002" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\171\000\006\004\013\016\010\001\002\000\004\002" +
    "\173\001\002\000\010\002\ufffc\004\ufffc\016\ufffc\001\002" +
    "\000\010\002\ufffd\004\ufffd\016\ufffd\001\002\000\010\002" +
    "\000\004\013\016\010\001\002\000\004\041\ufff8\001\002" +
    "\000\004\041\014\001\002\000\010\002\ufffe\004\ufffe\016" +
    "\ufffe\001\002\000\004\041\ufff9\001\002\000\010\030\015" +
    "\031\017\035\016\001\002\000\006\004\013\016\024\001" +
    "\002\000\004\040\020\001\002\000\034\002\ufffb\004\ufffb" +
    "\012\ufffb\014\ufffb\015\ufffb\016\ufffb\017\ufffb\030\ufffb\031" +
    "\ufffb\033\ufffb\034\ufffb\040\ufffb\041\ufffb\001\002\000\004" +
    "\036\021\001\002\000\004\031\022\001\002\000\034\002" +
    "\ufffa\004\ufffa\012\ufffa\014\ufffa\015\ufffa\016\ufffa\017\ufffa" +
    "\030\ufffa\031\ufffa\033\ufffa\034\ufffa\040\ufffa\041\ufffa\001" +
    "\002\000\006\032\ufff6\037\170\001\002\000\006\032\ufff5" +
    "\041\ufff8\001\002\000\004\041\165\001\002\000\004\032" +
    "\030\001\002\000\006\032\ufff3\037\ufff3\001\002\000\004" +
    "\033\032\001\002\000\010\002\ufff7\004\ufff7\016\ufff7\001" +
    "\002\000\032\004\uffbb\012\uffbb\014\uffbb\015\uffbb\016\uffbb" +
    "\017\uffbb\030\uffbb\031\uffbb\033\uffbb\034\uffbb\040\uffbb\041" +
    "\uffbb\001\002\000\032\004\013\012\uffbb\014\uffbb\015\uffbb" +
    "\016\010\017\uffbb\030\uffbb\031\uffbb\033\uffbb\034\uffbb\040" +
    "\uffbb\041\uffbb\001\002\000\032\004\uffee\012\uffee\014\uffee" +
    "\015\uffee\016\uffee\017\uffee\030\uffee\031\uffee\033\uffee\034" +
    "\uffee\040\uffee\041\uffee\001\002\000\026\012\050\014\044" +
    "\015\070\017\045\030\063\031\067\033\032\034\054\040" +
    "\052\041\051\001\002\000\032\004\uffef\012\uffef\014\uffef" +
    "\015\uffef\016\uffef\017\uffef\030\uffef\031\uffef\033\uffef\034" +
    "\uffef\040\uffef\041\uffef\001\002\000\026\012\uffec\014\uffec" +
    "\015\uffec\017\uffec\030\uffec\031\uffec\033\uffec\034\uffec\040" +
    "\uffec\041\uffec\001\002\000\004\041\041\001\002\000\006" +
    "\031\017\035\016\001\002\000\030\012\uffe2\013\uffe2\014" +
    "\uffe2\015\uffe2\017\uffe2\030\uffe2\031\uffe2\033\uffe2\034\uffe2" +
    "\040\uffe2\041\uffe2\001\002\000\026\012\uffed\014\uffed\015" +
    "\uffed\017\uffed\030\uffed\031\uffed\033\uffed\034\uffed\040\uffed" +
    "\041\uffed\001\002\000\004\030\161\001\002\000\012\030" +
    "\063\031\157\040\052\041\051\001\002\000\030\012\uffea" +
    "\013\uffea\014\uffea\015\uffea\017\uffea\030\uffea\031\uffea\033" +
    "\uffea\034\uffea\040\uffea\041\uffea\001\002\000\042\005\uffc7" +
    "\006\uffc7\007\uffc7\010\uffc7\020\uffc7\021\uffc7\022\uffc7\023" +
    "\uffc7\024\uffc7\025\uffc7\026\uffc7\027\uffc7\031\uffc7\032\uffc7" +
    "\036\uffc7\037\uffc7\001\002\000\004\030\150\001\002\000" +
    "\050\005\uffda\006\uffda\007\uffda\010\uffda\011\uffda\020\uffda" +
    "\021\uffda\022\uffda\023\uffda\024\uffda\025\uffda\026\uffda\027" +
    "\uffda\030\135\031\uffda\032\uffda\035\136\036\uffda\037\uffda" +
    "\001\002\000\042\005\uffc1\006\uffc1\007\uffc1\010\uffc1\020" +
    "\uffc1\021\uffc1\022\uffc1\023\uffc1\024\uffc1\025\uffc1\026\uffc1" +
    "\027\uffc1\031\uffc1\032\uffc1\036\uffc1\037\uffc1\001\002\000" +
    "\004\031\134\001\002\000\036\002\ufff0\004\ufff0\012\ufff0" +
    "\013\ufff0\014\ufff0\015\ufff0\016\ufff0\017\ufff0\030\ufff0\031" +
    "\ufff0\033\ufff0\034\ufff0\040\ufff0\041\ufff0\001\002\000\030" +
    "\012\uffe7\013\uffe7\014\uffe7\015\uffe7\017\uffe7\030\uffe7\031" +
    "\uffe7\033\uffe7\034\uffe7\040\uffe7\041\uffe7\001\002\000\042" +
    "\005\uffcb\006\uffcb\007\uffcb\010\uffcb\020\115\021\114\022" +
    "\uffcb\023\uffcb\024\uffcb\025\uffcb\026\uffcb\027\uffcb\031\uffcb" +
    "\032\uffcb\036\uffcb\037\uffcb\001\002\000\032\005\122\006" +
    "\131\022\123\023\120\024\124\025\125\026\121\027\130" +
    "\031\uffd7\032\uffd7\036\uffd7\037\uffd7\001\002\000\036\005" +
    "\uffcf\006\uffcf\007\111\010\107\022\uffcf\023\uffcf\024\uffcf" +
    "\025\uffcf\026\uffcf\027\uffcf\031\uffcf\032\uffcf\036\uffcf\037" +
    "\uffcf\001\002\000\012\031\uffdb\032\uffdb\036\uffdb\037\uffdb" +
    "\001\002\000\030\012\uffeb\013\uffeb\014\uffeb\015\uffeb\017" +
    "\uffeb\030\uffeb\031\uffeb\033\uffeb\034\uffeb\040\uffeb\041\uffeb" +
    "\001\002\000\010\030\063\040\052\041\051\001\002\000" +
    "\030\012\uffe9\013\uffe9\014\uffe9\015\uffe9\017\uffe9\030\uffe9" +
    "\031\uffe9\033\uffe9\034\uffe9\040\uffe9\041\uffe9\001\002\000" +
    "\030\012\uffe8\013\uffe8\014\uffe8\015\uffe8\017\uffe8\030\uffe8" +
    "\031\uffe8\033\uffe8\034\uffe8\040\uffe8\041\uffe8\001\002\000" +
    "\030\012\uffe1\013\uffe1\014\uffe1\015\uffe1\017\uffe1\030\uffe1" +
    "\031\uffe1\033\uffe1\034\uffe1\040\uffe1\041\uffe1\001\002\000" +
    "\030\012\uffe5\013\uffe5\014\uffe5\015\uffe5\017\uffe5\030\uffe5" +
    "\031\uffe5\033\uffe5\034\uffe5\040\uffe5\041\uffe5\001\002\000" +
    "\004\030\075\001\002\000\042\005\uffc2\006\uffc2\007\uffc2" +
    "\010\uffc2\020\uffc2\021\uffc2\022\uffc2\023\uffc2\024\uffc2\025" +
    "\uffc2\026\uffc2\027\uffc2\031\uffc2\032\uffc2\036\uffc2\037\uffc2" +
    "\001\002\000\044\005\uffc3\006\uffc3\007\uffc3\010\uffc3\011" +
    "\073\020\uffc3\021\uffc3\022\uffc3\023\uffc3\024\uffc3\025\uffc3" +
    "\026\uffc3\027\uffc3\031\uffc3\032\uffc3\036\uffc3\037\uffc3\001" +
    "\002\000\010\030\063\040\052\041\051\001\002\000\012" +
    "\031\uffdc\032\uffdc\036\uffdc\037\uffdc\001\002\000\010\030" +
    "\063\040\052\041\051\001\002\000\004\037\077\001\002" +
    "\000\010\030\063\040\052\041\051\001\002\000\004\037" +
    "\101\001\002\000\010\030\063\040\052\041\051\001\002" +
    "\000\004\032\103\001\002\000\024\012\050\014\044\015" +
    "\070\017\045\030\063\031\067\033\032\040\052\041\051" +
    "\001\002\000\030\012\uffdf\013\uffdf\014\uffdf\015\uffdf\017" +
    "\uffdf\030\uffdf\031\uffdf\033\uffdf\034\uffdf\040\uffdf\041\uffdf" +
    "\001\002\000\004\032\106\001\002\000\042\005\uffc4\006" +
    "\uffc4\007\uffc4\010\uffc4\020\uffc4\021\uffc4\022\uffc4\023\uffc4" +
    "\024\uffc4\025\uffc4\026\uffc4\027\uffc4\031\uffc4\032\uffc4\036" +
    "\uffc4\037\uffc4\001\002\000\010\030\uffca\040\uffca\041\uffca" +
    "\001\002\000\010\030\063\040\052\041\051\001\002\000" +
    "\010\030\uffc9\040\uffc9\041\uffc9\001\002\000\042\005\uffc3" +
    "\006\uffc3\007\uffc3\010\uffc3\020\uffc3\021\uffc3\022\uffc3\023" +
    "\uffc3\024\uffc3\025\uffc3\026\uffc3\027\uffc3\031\uffc3\032\uffc3" +
    "\036\uffc3\037\uffc3\001\002\000\042\005\uffcc\006\uffcc\007" +
    "\uffcc\010\uffcc\020\115\021\114\022\uffcc\023\uffcc\024\uffcc" +
    "\025\uffcc\026\uffcc\027\uffcc\031\uffcc\032\uffcc\036\uffcc\037" +
    "\uffcc\001\002\000\010\030\uffc5\040\uffc5\041\uffc5\001\002" +
    "\000\010\030\uffc6\040\uffc6\041\uffc6\001\002\000\010\030" +
    "\063\040\052\041\051\001\002\000\042\005\uffc8\006\uffc8" +
    "\007\uffc8\010\uffc8\020\uffc8\021\uffc8\022\uffc8\023\uffc8\024" +
    "\uffc8\025\uffc8\026\uffc8\027\uffc8\031\uffc8\032\uffc8\036\uffc8" +
    "\037\uffc8\001\002\000\010\030\uffd6\040\uffd6\041\uffd6\001" +
    "\002\000\010\030\uffd2\040\uffd2\041\uffd2\001\002\000\010" +
    "\030\uffce\040\uffce\041\uffce\001\002\000\010\030\uffd5\040" +
    "\uffd5\041\uffd5\001\002\000\010\030\uffd4\040\uffd4\041\uffd4" +
    "\001\002\000\010\030\uffd3\040\uffd3\041\uffd3\001\002\000" +
    "\010\030\063\040\052\041\051\001\002\000\010\030\063" +
    "\040\052\041\051\001\002\000\010\030\uffd1\040\uffd1\041" +
    "\uffd1\001\002\000\010\030\uffcd\040\uffcd\041\uffcd\001\002" +
    "\000\036\005\uffd0\006\uffd0\007\111\010\107\022\uffd0\023" +
    "\uffd0\024\uffd0\025\uffd0\026\uffd0\027\uffd0\031\uffd0\032\uffd0" +
    "\036\uffd0\037\uffd0\001\002\000\016\005\122\006\131\031" +
    "\uffd8\032\uffd8\036\uffd8\037\uffd8\001\002\000\030\012\uffe6" +
    "\013\uffe6\014\uffe6\015\uffe6\017\uffe6\030\uffe6\031\uffe6\033" +
    "\uffe6\034\uffe6\040\uffe6\041\uffe6\001\002\000\012\030\063" +
    "\032\uffbb\040\052\041\051\001\002\000\010\030\063\040" +
    "\052\041\051\001\002\000\004\036\140\001\002\000\044" +
    "\005\uffd9\006\uffd9\007\uffd9\010\uffd9\011\uffd9\020\uffd9\021" +
    "\uffd9\022\uffd9\023\uffd9\024\uffd9\025\uffd9\026\uffd9\027\uffd9" +
    "\031\uffd9\032\uffd9\036\uffd9\037\uffd9\001\002\000\006\032" +
    "\uffbf\037\146\001\002\000\004\032\uffbe\001\002\000\006" +
    "\032\uffbc\037\uffbc\001\002\000\004\032\145\001\002\000" +
    "\042\005\uffc0\006\uffc0\007\uffc0\010\uffc0\020\uffc0\021\uffc0" +
    "\022\uffc0\023\uffc0\024\uffc0\025\uffc0\026\uffc0\027\uffc0\031" +
    "\uffc0\032\uffc0\036\uffc0\037\uffc0\001\002\000\010\030\063" +
    "\040\052\041\051\001\002\000\006\032\uffbd\037\uffbd\001" +
    "\002\000\010\030\063\040\052\041\051\001\002\000\004" +
    "\032\152\001\002\000\024\012\050\014\044\015\070\017" +
    "\045\030\063\031\067\033\032\040\052\041\051\001\002" +
    "\000\030\012\uffe4\013\154\014\uffe4\015\uffe4\017\uffe4\030" +
    "\uffe4\031\uffe4\033\uffe4\034\uffe4\040\uffe4\041\uffe4\001\002" +
    "\000\024\012\050\014\044\015\070\017\045\030\063\031" +
    "\067\033\032\040\052\041\051\001\002\000\030\012\uffe3" +
    "\013\uffe3\014\uffe3\015\uffe3\017\uffe3\030\uffe3\031\uffe3\033" +
    "\uffe3\034\uffe3\040\uffe3\041\uffe3\001\002\000\004\031\160" +
    "\001\002\000\030\012\uffde\013\uffde\014\uffde\015\uffde\017" +
    "\uffde\030\uffde\031\uffde\033\uffde\034\uffde\040\uffde\041\uffde" +
    "\001\002\000\030\012\uffdd\013\uffdd\014\uffdd\015\uffdd\017" +
    "\uffdd\030\uffdd\031\uffdd\033\uffdd\034\uffdd\040\uffdd\041\uffdd" +
    "\001\002\000\010\030\063\040\052\041\051\001\002\000" +
    "\004\032\163\001\002\000\024\012\050\014\044\015\070" +
    "\017\045\030\063\031\067\033\032\040\052\041\051\001" +
    "\002\000\030\012\uffe0\013\uffe0\014\uffe0\015\uffe0\017\uffe0" +
    "\030\uffe0\031\uffe0\033\uffe0\034\uffe0\040\uffe0\041\uffe0\001" +
    "\002\000\010\032\ufff2\035\166\037\ufff2\001\002\000\004" +
    "\036\167\001\002\000\006\032\ufff1\037\ufff1\001\002\000" +
    "\006\004\013\016\010\001\002\000\006\032\ufff4\037\ufff4" +
    "\001\002\000\010\002\uffff\004\uffff\016\uffff\001\002\000" +
    "\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\171\000\016\002\003\003\006\004\011\005\005\006" +
    "\004\042\010\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\004\171\005\005\006\004\042" +
    "\010\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\007" +
    "\025\010\022\011\026\042\024\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\012" +
    "\030\001\001\000\002\001\001\000\006\013\032\043\033" +
    "\001\001\000\012\005\035\014\034\042\037\043\036\001" +
    "\001\000\002\001\001\000\042\012\045\015\042\016\061" +
    "\017\063\020\064\021\041\022\065\023\054\024\052\025" +
    "\071\026\060\027\056\030\057\031\055\032\046\033\070" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\024\155\025\071\026\060\027" +
    "\056\030\057\031\055\032\046\033\070\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\041\115\001\001\000\006\036" +
    "\125\037\126\001\001\000\004\040\107\001\001\000\002" +
    "\001\001\000\002\001\001\000\022\024\104\025\071\026" +
    "\060\027\056\030\057\031\055\032\046\033\070\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\022\024\073\025\071\026\060\027\056\030" +
    "\057\031\055\032\046\033\070\001\001\000\002\001\001" +
    "\000\022\024\075\025\071\026\060\027\056\030\057\031" +
    "\055\032\046\033\070\001\001\000\002\001\001\000\022" +
    "\024\077\025\071\026\060\027\056\030\057\031\055\032" +
    "\046\033\070\001\001\000\002\001\001\000\022\024\101" +
    "\025\071\026\060\027\056\030\057\031\055\032\046\033" +
    "\070\001\001\000\002\001\001\000\042\012\045\015\103" +
    "\016\061\017\063\020\064\021\041\022\065\023\054\024" +
    "\052\025\071\026\060\027\056\030\057\031\055\032\046" +
    "\033\070\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\025\111\031\112" +
    "\032\046\033\070\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\041\115\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\025\111\032\116\033\070\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\025\111\027\132\030\057\031\055\032\046" +
    "\033\070\001\001\000\014\025\111\030\131\031\055\032" +
    "\046\033\070\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\040\107\001\001\000\004\037\126\001\001\000" +
    "\002\001\001\000\030\024\142\025\071\026\060\027\056" +
    "\030\057\031\055\032\046\033\070\034\143\035\140\043" +
    "\141\001\001\000\022\024\136\025\071\026\060\027\056" +
    "\030\057\031\055\032\046\033\070\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\022\024\146\025\071\026\060\027\056\030\057\031\055" +
    "\032\046\033\070\001\001\000\002\001\001\000\022\024" +
    "\150\025\071\026\060\027\056\030\057\031\055\032\046" +
    "\033\070\001\001\000\002\001\001\000\042\012\045\015" +
    "\152\016\061\017\063\020\064\021\041\022\065\023\054" +
    "\024\052\025\071\026\060\027\056\030\057\031\055\032" +
    "\046\033\070\001\001\000\002\001\001\000\042\012\045" +
    "\015\154\016\061\017\063\020\064\021\041\022\065\023" +
    "\054\024\052\025\071\026\060\027\056\030\057\031\055" +
    "\032\046\033\070\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\022\024\161" +
    "\025\071\026\060\027\056\030\057\031\055\032\046\033" +
    "\070\001\001\000\002\001\001\000\042\012\045\015\163" +
    "\016\061\017\063\020\064\021\041\022\065\023\054\024" +
    "\052\025\071\026\060\027\056\030\057\031\055\032\046" +
    "\033\070\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\011\170\042\024" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public AstNode raiz = null; //Crea el nodo raiz en nulo.
    public String produc = ""; //Crea el string de las producciones a concatenar.

	/* Reporte de error encontrado. */
    public void report_error(String message, Object info) {
        StringBuilder m = new StringBuilder("Error");
        if (info instanceof java_cup.runtime.Symbol) {
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
            if (s.left >= 0) {                
                m.append(" en la linea "+ (s.left+1));
                if (s.right >= 0)
                    m.append(", columna "+ (s.right+1));
            }
        }
        m.append(" : "+message);
        System.err.println(m);
    }
    /* Cuando se encuentra un error de donde el sistema no puede
        recuperarse, se lanza un error fatal. Se despliega el mensaje
        de error y se finaliza la ejecucion. */
    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
        System.exit(1);
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {


	//Hashtable table = new Hashtable();

  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		AstNode start_val = (AstNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // program ::= declaration_list 
            {
              AstNode RESULT =null;
		int dlleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dlright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AstNode dl = (AstNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		this.parser.raiz = new AstProgram(dl);
   System.out.println("Prog");
   		this.parser.produc += "PROGRAM::= DECLARATION_LIST\n";
   		RESULT = this.parser.raiz;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // declaration_list ::= declaration_list declaration 
            {
              AstNode RESULT =null;
		int dlleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int dlright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		AstNode dl = (AstNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AstNode d = (AstNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
   System.out.println("DeclList");
	   		this.parser.produc += "DECLARATION_LIST::= DECLARATION_LIST DECLARATION\n";
	   		RESULT = d;
	   		d.setHermano(dl);
	   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaration_list",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // declaration_list ::= declaration 
            {
              AstNode RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AstNode d = (AstNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
	    System.out.println("DeclEnd");
	    	this.parser.produc += "DECLARATION_LIST::= DECLARATION\n";
	   		RESULT = d;
    	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaration_list",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // declaration ::= var_declaration 
            {
              AstNode RESULT =null;
		int vdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AstNode vd = (AstNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
   System.out.println("VarDecl");
	   		this.parser.produc += "DECLARATION::= VAR_DECLARATION\n";
	   		RESULT = vd;
	   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaration",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // declaration ::= fun_declaration 
            {
              AstNode RESULT =null;
		int fdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AstNode fd = (AstNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
	   		System.out.println("FunDecl");
	   		this.parser.produc += "DECLARATION::= FUN_DECLARATION\n";
	   		RESULT = fd;
	   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaration",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // var_declaration ::= type_specifier ID PUNTOCOMA 
            {
              AstNode RESULT =null;
		int tsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Integer ts = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int pcleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pcright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Symbol pc = (Symbol)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
   System.out.println("VarDecl");
	   		this.parser.produc += "VAR_DECLARATION::= TYPE_SPECIFIER ID PUNTOCOMA\n";
	   		RESULT = new AstVarDec(ts,id,false,null); //Identifica que no llega un corchete.
	   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_declaration",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // var_declaration ::= type_specifier ID CORCHETEIZQ NUM CORCHETEDER PUNTOCOMA 
            {
              AstNode RESULT =null;
		int tsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int tsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Integer ts = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int blleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int blright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Symbol bl = (Symbol)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int numleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int numright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String num = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int brleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int brright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Symbol br = (Symbol)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int pcleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pcright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Symbol pc = (Symbol)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
	   		System.out.println("VarDecl[]");
	   		this.parser.produc += "VAR_DECLARATION::= TYPE_SPECIFIER ID CORCHETEIZQ NUM CORCHETEDER PUNTOCOMA\n";
	   		RESULT = new AstVarDec(ts,id,true,num);
	   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_declaration",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // type_specifier ::= INT 
            {
              Integer RESULT =null;
		
   System.out.println("Int");
	   		this.parser.produc += "TYPE_SPECIFIER::= INT\n";
	   		RESULT = sym.INT;
	   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_specifier",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // type_specifier ::= VOID 
            {
              Integer RESULT =null;
		
	   		System.out.println("Void");
	   		this.parser.produc += "TYPE_SPECIFIER::= VOID\n";
	   		RESULT = sym.VOID;
	   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_specifier",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // fun_declaration ::= type_specifier ID PARENIZQ params PARENDER compound_stmt 
            {
              AstNode RESULT =null;
		int tsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int tsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Integer ts = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int plleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int plright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Symbol pl = (Symbol)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int paleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int paright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		AstNode pa = (AstNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int prleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int prright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Symbol pr = (Symbol)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int csleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int csright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AstNode cs = (AstNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
	   		System.out.println("Fun_Decl");
	   		this.parser.produc += "FUN_DECLARATION::= TYPE_SPECIFIER ID PARENIZQ PARAMS PARENDER COMPOUND_STMT\n";
	   		RESULT = new AstFunDec(ts,id,pa,cs);
	   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("fun_declaration",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // params ::= param_list 
            {
              AstNode RESULT =null;
		int plleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int plright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AstNode pl = (AstNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
   System.out.println("Params");
	   		this.parser.produc += "PARAMS::= PARAM_LIST\n";
	   		RESULT = pl;
	   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("params",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // params ::= VOID 
            {
              AstNode RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Symbol v = (Symbol)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
	   System.out.println("VoidParam");
	   		this.parser.produc += "PARAMS::= VOID\n";
	   		RESULT = new AstParamDec(sym.VOID,null,false);
	   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("params",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // param_list ::= param_list COMA param 
            {
              AstNode RESULT =null;
		int plleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int plright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		AstNode pl = (AstNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Symbol c = (Symbol)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AstNode p = (AstNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
   System.out.println("ParamList");
	   		this.parser.produc += "PARAM_LIST::= PARAM_LIST COMA PARAM\n";
	   		RESULT = p;
	   		p.setHermano(pl);
	   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("param_list",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // param_list ::= param 
            {
              AstNode RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AstNode p = (AstNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
	   System.out.println("EndParamList");
	   		this.parser.produc += "PARAM_LIST::= PARAM\n";
	   		RESULT = p;
	   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("param_list",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // param ::= type_specifier ID 
            {
              AstNode RESULT =null;
		int tsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Integer ts = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
   System.out.println("TypeSpecifierParama");
	   		this.parser.produc += "PARAM::= TYPE_SPECIFIER ID\n";
	   		RESULT = new AstParamDec(ts,id,false);
	   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("param",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // param ::= type_specifier ID CORCHETEIZQ CORCHETEDER 
            {
              AstNode RESULT =null;
		int tsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int tsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Integer ts = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int blleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int blright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Symbol bl = (Symbol)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int brleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int brright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Symbol br = (Symbol)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
	   System.out.println("TypeSpecifier[]Param");
	   		this.parser.produc += "PARAM::= TYPE_SPECIFIER ID CORCHETEIZQ CORCHETEDER\n";
	   		RESULT = new AstParamDec(ts,id,true);
	   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("param",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // compound_stmt ::= LLAVEIZQ local_declarations statement_list LLAVEDER 
            {
              AstNode RESULT =null;
		int ldleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int ldright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		AstNode ld = (AstNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int slleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		AstNode sl = (AstNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
   System.out.println("Compound");
	   		this.parser.produc += "COMPOUND_STMT::= LLAVEIZQ LOCAL_DECLARATIONS STATEMENT_LIST LLAVEDER\n";
	   		RESULT = new AstCompStmt(ld,sl);
	   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("compound_stmt",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // local_declarations ::= local_declarations var_declaration 
            {
              AstNode RESULT =null;
		int ldleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int ldright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		AstNode ld = (AstNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int vdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AstNode vd = (AstNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
   System.out.println("LocalDecl");
	   		this.parser.produc += "LOCAL_DECLARATIONS::= LOCAL_DECLARATIONS VAR_DECLARATION\n";
	   		RESULT = vd;
	   		vd.setHermano(ld);
	   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("local_declarations",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // local_declarations ::= empty 
            {
              AstNode RESULT =null;
		
	   System.out.println("LocalDeclEnd");
	   		this.parser.produc += "LOCAL_DECLARATIONS::= EMPTY\n";
	   		RESULT = null; //Ya que en la terminal esta Empty.
	   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("local_declarations",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // statement_list ::= statement_list statement 
            {
              AstNode RESULT =null;
		int slleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		AstNode sl = (AstNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AstNode s = (AstNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
   System.out.println("StmtList");
	   		this.parser.produc += "STATEMENT_LIST::= STATEMENT_LIST STATEMENT\n";
	   		RESULT = s;
	   		s.setHermano(sl);
	   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement_list",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // statement_list ::= empty 
            {
              AstNode RESULT =null;
		
	   System.out.println("StmtListEnd");
	   		this.parser.produc += "STATEMENT_LIST::= EMPTY\n";
	   		RESULT = null; //Ya que en la terminal esta Empty.
	   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement_list",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // statement ::= expression_stmt 
            {
              AstNode RESULT =null;
		int esleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int esright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AstNode es = (AstNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
   System.out.println("Expression");
	   		this.parser.produc += "STATEMENT::= EXPRESSION_STMT\n";
	   		RESULT = es;
	   
	   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // statement ::= compound_stmt 
            {
              AstNode RESULT =null;
		int csleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int csright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AstNode cs = (AstNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
	   System.out.println("Stmt->CompoundStmt");
	   		this.parser.produc += "STATEMENT::= COMPOUND_STMT\n";
	   		RESULT = cs;
	   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // statement ::= selection_stmt 
            {
              AstNode RESULT =null;
		int ssleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ssright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AstNode ss = (AstNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
	   System.out.println("Stmt->SelectStmt");
	   		this.parser.produc += "STATEMENT::= SELECTION_STMT\n";
	   		RESULT = ss;
	   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // statement ::= iteration_stmt 
            {
              AstNode RESULT =null;
		int isleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int isright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AstNode is = (AstNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
	   System.out.println("Stmt->IterStmt");
	   		this.parser.produc += "STATEMENT::= ITERATION_STMT\n";
	   		RESULT = is;
	   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // statement ::= return_stmt 
            {
              AstNode RESULT =null;
		int rsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AstNode rs = (AstNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
	   System.out.println("Stmt->Ret");
	   		this.parser.produc += "STATEMENT::= RETURN_STMT\n";
	   		RESULT = rs;
	   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // expression_stmt ::= expression PUNTOCOMA 
            {
              AstNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		AstNode e = (AstNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
   System.out.println("ExprStmt");
	   		this.parser.produc += "EXPRESSION_STMT::= EXPRESSION PUNTOCOMA\n";
	   		RESULT = e;
	   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression_stmt",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // expression_stmt ::= PUNTOCOMA 
            {
              AstNode RESULT =null;
		
	   System.out.println("EmtpyStmt");
	   		this.parser.produc += "EXPRESSION_STMT::= PUNTOCOMA\n";
	   		RESULT = new AstVaciaStmt();
	   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression_stmt",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // selection_stmt ::= IF PARENIZQ expression PARENDER statement 
            {
              AstNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		AstNode e = (AstNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AstNode s = (AstNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
   System.out.println("IfNoElse");
	   		this.parser.produc += "SELECTION_STMT::= IF PARENIZQ EXPRESSION PARENDER STATEMENT\n";
	   		RESULT = new AstSelectStmt(e,s,null,false);
	   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("selection_stmt",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // selection_stmt ::= IF PARENIZQ expression PARENDER statement ELSE statement 
            {
              AstNode RESULT =null;
		int plleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int plright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Symbol pl = (Symbol)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		AstNode e = (AstNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int prleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int prright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Symbol pr = (Symbol)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int s1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		AstNode s1 = (AstNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AstNode s2 = (AstNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
	   	System.out.println("IfElse");
	   		this.parser.produc += "SELECTION_STMT::= IF PARENIZQ EXPRESSION PARENDER STATEMENT ELSE STATEMENT\n";
	   		RESULT = new AstSelectStmt(e,s1,s2,true);
	   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("selection_stmt",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // iteration_stmt ::= while_stmt 
            {
              AstNode RESULT =null;
		int wsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int wsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AstNode ws = (AstNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
	   		this.parser.produc += "ITERATION_STMT::= WHILE_STMT\n";
	   		RESULT = ws;
	   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("iteration_stmt",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // iteration_stmt ::= for_stmt 
            {
              AstNode RESULT =null;
		int fsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AstNode fs = (AstNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
	                this.parser.produc += "iteration_stmt ::= for_stmt\n"; 
	                RESULT = fs; 
	   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("iteration_stmt",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // while_stmt ::= WHILE PARENIZQ expression PARENDER statement 
            {
              AstNode RESULT =null;
		int plleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int plright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Symbol pl = (Symbol)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		AstNode e = (AstNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int prleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int prright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Symbol pr = (Symbol)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AstNode s = (AstNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
	   		this.parser.produc += "WHILE_STMT::= WHILE PARENIZQ EXPRESSION PARENDER STATEMENT\n";
	   		RESULT = new AstIterStmt(e,s,false);
	   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("while_stmt",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // for_stmt ::= FOR PARENIZQ expression COMA expression COMA expression PARENDER statement 
            {
              AstNode RESULT =null;
		int plleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int plright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Symbol pl = (Symbol)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		AstNode e1 = (AstNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		AstNode e2 = (AstNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		AstNode e3 = (AstNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int prleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int prright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Symbol pr = (Symbol)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AstNode s = (AstNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
	   		this.parser.produc += "FOR_STMT::= FOR PARENIZQ expression COMA expression COMA expression PARENDER STATEMENT\n";
	   		RESULT = new AstIterStmt(e1,e2,e3,s);
	   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("for_stmt",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // return_stmt ::= RETURN PUNTOCOMA 
            {
              AstNode RESULT =null;
		
	   		this.parser.produc += "RETURN_STMT::= RETURN PUNTOCOMA\n";
	   		RESULT = new AstReturnStmt(null);
	   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("return_stmt",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // return_stmt ::= RETURN expression PUNTOCOMA 
            {
              AstNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		AstNode e = (AstNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
	   		this.parser.produc += "RETURN_STMT::= RETURN EXPRESSION PUNTOCOMA\n";
	   		RESULT = new AstReturnStmt(e);
	   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("return_stmt",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // expression ::= var ASIGNACION expression 
            {
              AstNode RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		AstNode v = (AstNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AstNode e = (AstNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
	   		this.parser.produc += "EXPRESSION::= VAR ASIGNACION EXPRESSION\n";
	   		RESULT = new AstExpAsign(v,e,sym.ASIGNACION);
	   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // expression ::= simple_expression 
            {
              AstNode RESULT =null;
		int seleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int seright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AstNode se = (AstNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
	   		this.parser.produc += "EXPRESSION::= SIMPLE_EXPRESSION\n";
	   		RESULT = se;
	   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // var ::= ID 
            {
              AstNode RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
   System.out.println("VarCall");
	   		this.parser.produc += "VAR::= ID\n";
	   		RESULT = new AstExpVar(null,id,false);
	   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // var ::= ID CORCHETEIZQ expression CORCHETEDER 
            {
              AstNode RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		AstNode e = (AstNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
	   System.out.println("Var[]Call");
	   		this.parser.produc += "VAR::= ID CORCHETEIZQ EXPRESSION CORCHETEDER\n";
	   		RESULT = new AstExpVar(e,id,true);
	   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // simple_expression ::= additive_expression relop additive_expression 
            {
              AstNode RESULT =null;
		int ae1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int ae1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		AstNode ae1 = (AstNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Integer r = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int ae2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ae2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AstNode ae2 = (AstNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
	   		this.parser.produc += "SIMPLE_EXPRESION::= ADITIVE_EXPRESION RELOP ADITIVE_EXPRESION\n";
	   		RESULT = new AstExpBin(r,ae1,ae2);
	   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simple_expression",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // simple_expression ::= additive_expression 
            {
              AstNode RESULT =null;
		int aeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AstNode ae = (AstNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
	   		this.parser.produc += "SIMPLE_EXPRESION::= ADITIVE_EXPRESION\n";
	   		RESULT = ae;
	   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simple_expression",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // relop ::= MENORIGUAL 
            {
              Integer RESULT =null;
		
	   		this.parser.produc += "RELOP::= MENORIGUAL\n";
	   		RESULT = sym.MENORIGUAL;
	   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("relop",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // relop ::= MENORQUE 
            {
              Integer RESULT =null;
		
	   		this.parser.produc += "RELOP::= MENORQUE\n";
	   		RESULT = sym.MENORQUE;
	   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("relop",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // relop ::= MAYORQUE 
            {
              Integer RESULT =null;
		
	   		this.parser.produc += "RELOP::= MAYORQUE\n";
	   		RESULT = sym.MAYORQUE;
	   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("relop",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // relop ::= MAYORIGUAL 
            {
              Integer RESULT =null;
		
	   		this.parser.produc += "RELOP::= MAYORIGUAL\n";
	   		RESULT = sym.MAYORIGUAL;
	   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("relop",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // relop ::= IGUALDAD 
            {
              Integer RESULT =null;
		
	   		this.parser.produc += "RELOP::= IGUALDAD\n";
	   		RESULT = sym.IGUALDAD;
	   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("relop",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // relop ::= DISTINTO 
            {
              Integer RESULT =null;
		
	   		this.parser.produc += "RELOP::= DISTINTO\n";
	   		RESULT = sym.DISTINTO;
	   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("relop",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // additive_expression ::= additive_expression addop term 
            {
              AstNode RESULT =null;
		int aeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		AstNode ae = (AstNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Integer a = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AstNode t = (AstNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
	   		this.parser.produc += "ADDITIVE_EXPRESSION::= ADDITIVE_EXPRESSION ADDOP TERM\n";
	   		RESULT = new AstExpBin(a,ae,t);
	   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("additive_expression",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // additive_expression ::= term 
            {
              AstNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AstNode t = (AstNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
	   		this.parser.produc += "ADDITIVE_EXPRESSION::= TERM\n";
	   		RESULT = t;
	   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("additive_expression",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // addop ::= SUMA 
            {
              Integer RESULT =null;
		
	   		this.parser.produc += "ADDOP::= SUMA\n";
	   		RESULT = sym.SUMA;
	   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("addop",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // addop ::= RESTA 
            {
              Integer RESULT =null;
		
	   		this.parser.produc += "ADDOP::= RESTA\n";
	   		RESULT = sym.RESTA;
	   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("addop",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // term ::= term mulop factor 
            {
              AstNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		AstNode t = (AstNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Integer m = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AstNode f = (AstNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
	   		this.parser.produc += "TERM::= TERM MULOP FACTOR\n";
	   		RESULT = new AstExpBin(m,t,f);
	   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("term",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // term ::= factor 
            {
              AstNode RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AstNode f = (AstNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
	   		this.parser.produc += "TERM::= FACTOR\n";
	   		RESULT = f;
	   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("term",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // mulop ::= MULTIPLICACION 
            {
              Integer RESULT =null;
		
	   		this.parser.produc += "MULOP::= MULTIPLICACION\n";
	   		RESULT = sym.MULTIPLICACION;
	   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("mulop",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // mulop ::= DIVISION 
            {
              Integer RESULT =null;
		
	   		this.parser.produc += "MULOP::= DIVISION\n";
	   		RESULT = sym.DIVISION;
	   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("mulop",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // factor ::= factor powop exp 
            {
              AstNode RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		AstNode f = (AstNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Integer p = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int exleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AstNode ex = (AstNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
	   		this.parser.produc += "FACT::= FACTOR POWOP EXP\n";
	   		RESULT = ex;
	   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("factor",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // factor ::= exp 
            {
              AstNode RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AstNode ex = (AstNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
	   		this.parser.produc += "FACTOR::= EXP\n";
	   		RESULT = ex;
	   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("factor",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // powop ::= POTENCIA 
            {
              Integer RESULT =null;
		
	   		this.parser.produc += "POWOP::= POTENCIA\n";
	   		RESULT = sym.POTENCIA;
	   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("powop",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // powop ::= EXPONENCIACION 
            {
              Integer RESULT =null;
		
	   		this.parser.produc += "POWOP::= EXPONENCIACION\n";
	   		RESULT = sym.EXPONENCIACION;
	   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("powop",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // exp ::= PARENIZQ expression PARENDER 
            {
              AstNode RESULT =null;
		int plleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int plright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Symbol pl = (Symbol)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		AstNode e = (AstNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int prleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int prright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Symbol pr = (Symbol)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
	   		this.parser.produc += "EXP::= PARENIZQ EXPRESSION PARENDER\n";
	   		RESULT = e;
	   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // exp ::= var 
            {
              AstNode RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AstNode v = (AstNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
	   		this.parser.produc += "EXP::= VAR\n";
	   		RESULT = v;
	   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // exp ::= call 
            {
              AstNode RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AstNode c = (AstNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
	   		this.parser.produc += "EXP::= CALL\n";
	   		RESULT = c;
	   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // exp ::= NUM 
            {
              AstNode RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
	   		this.parser.produc += "EXP::= NUM\n";
	   		RESULT = new AstExpConst(n);
	   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // call ::= ID PARENIZQ args PARENDER 
            {
              AstNode RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int plleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int plright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Symbol pl = (Symbol)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		AstNode a = (AstNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int prleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int prright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Symbol pr = (Symbol)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
	   		this.parser.produc += "CALL::= ID PARENIZQ ARGS PARENDER\n";
	   		RESULT = new AstExpFun(id,a);
	   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("call",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // args ::= arg_list 
            {
              AstNode RESULT =null;
		int alleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int alright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AstNode al = (AstNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
	   		this.parser.produc += "ARGS::= ARG_LIST\n";
	   		RESULT = al;
	   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("args",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // args ::= empty 
            {
              AstNode RESULT =null;
		
	   		this.parser.produc += "ARGS::= EMPTY\n";
	   		RESULT = null;
	   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("args",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // arg_list ::= arg_list COMA expression 
            {
              AstNode RESULT =null;
		int alleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int alright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		AstNode al = (AstNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AstNode e = (AstNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
	   		this.parser.produc += "ARG_LIST::= ARG_LIST COMA EXPRESSION\n";
	   		RESULT = e;
	   		e.setHermano(al);
	   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arg_list",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // arg_list ::= expression 
            {
              AstNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AstNode e = (AstNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
	   		this.parser.produc += "ARG_LIST::= EXPRESSION\n";
	   		RESULT = e;
	   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arg_list",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // empty ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("empty",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
